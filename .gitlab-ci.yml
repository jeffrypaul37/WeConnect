# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `..gitlab-ci.yml` file.
# You should not add this template to an existing `..gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - quality
  - publish
  - deploy

test:
  stage: test
  image: maven:latest
  script:
    - mvn test

build:
  stage: build
  image: maven:latest
  script:
    - mvn clean package
  artifacts:
    paths:
      - $CI_PROJECT_DIR/target/*.jar


quality:
   image: maven:latest
   stage: quality
   script:
     - echo "Compiling the project"
     - mkdir smells/
     - java -jar $CI_PROJECT_DIR/DesigniteJava.jar -i $CI_PROJECT_DIR -o $CI_PROJECT_DIR/smells/ -d
   artifacts:
     paths:
       - smells/
#       - $CI_PROJECT_DIR

publish:
  image: docker:latest
  stage: publish
  variables:
    # these values may need to be different if using TLS, k8s, etc.
    # You can alternatively set defaults in your runner config
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:dind

  script:
    - pwd
    - echo $SERVER_IP
    - docker --version
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io
    - docker build -t docker.io/weconnect056/weconnect:$CI_COMMIT_SHORT_SHA .
    - docker push docker.io/weconnect056/weconnect:$CI_COMMIT_SHORT_SHA



deploy:
  image: alpine:latest
  stage: deploy
  script:
#    - chmod og= $ID_RSA
    - chmod 600 $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull docker.io/weconnect056/weconnect:$CI_COMMIT_SHORT_SHA"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f Group04 || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 8080:8080 --name Group04 docker.io/weconnect056/weconnect:$CI_COMMIT_SHORT_SHA"
  environment:
    name: production
    url: http://172.17.1.76:8080
  only:
    - main

